package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.

import (
	"context"
	"todoapp/graph/generated"
	"todoapp/graph/model"
)

func (r *mutationResolver) CreateTask(ctx context.Context, input model.CreateTaskInput) (*model.CreateTaskPayload, error) {
	// This function body is generated by github.com/izumin5210/protogql. DO NOT EDIT.

	resp, err := (&mutationProtoResolver{Resolver: r.Resolver}).CreateTask(ctx, input)
	if err != nil {
		return nil, err
	}
	return model.CreateTaskPayloadFromProto(resp), nil
}

func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	// This function body is generated by github.com/izumin5210/protogql. DO NOT EDIT.

	resp, err := (&queryProtoResolver{Resolver: r.Resolver}).Tasks(ctx)
	if err != nil {
		return nil, err
	}
	return model.TaskListFromRepeatedProto(resp), nil
}

func (r *taskResolver) Assignees(ctx context.Context, obj *model.Task) ([]*model.User, error) {
	// This function body is generated by github.com/izumin5210/protogql. DO NOT EDIT.

	resp, err := (&taskProtoResolver{Resolver: r.Resolver}).Assignees(ctx, model.TaskToProto(obj))
	if err != nil {
		return nil, err
	}
	return model.UserListFromRepeatedProto(resp), nil
}

func (r *taskResolver) Author(ctx context.Context, obj *model.Task) (*model.User, error) {
	// This function body is generated by github.com/izumin5210/protogql. DO NOT EDIT.

	resp, err := (&taskProtoResolver{Resolver: r.Resolver}).Author(ctx, model.TaskToProto(obj))
	if err != nil {
		return nil, err
	}
	return model.UserFromProto(resp), nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
