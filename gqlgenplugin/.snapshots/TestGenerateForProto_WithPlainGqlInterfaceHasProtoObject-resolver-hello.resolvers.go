package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.

import (
	"context"
	"testapp/graph"
	"testapp/model"
)

func (r *mutationResolver) CreateHello(ctx context.Context, input *model.CreateHelloInput) (*model.CreateHelloPayload, error) {
	// This function body is generated by github.com/izumin5210/protogql. DO NOT EDIT.

	resp, err := (&mutationProtoResolver{Resolver: r.Resolver}).CreateHello(ctx, input)
	if err != nil {
		return nil, err
	}
	return model.CreateHelloPayloadFromProto(resp), nil
}

func (r *queryResolver) Node(ctx context.Context, id string) (model.Node, error) {
	// This function body is generated by github.com/izumin5210/protogql. DO NOT EDIT.

	resp, err := (&queryProtoResolver{Resolver: r.Resolver}).Node(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.NodeFromProto(resp), nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

