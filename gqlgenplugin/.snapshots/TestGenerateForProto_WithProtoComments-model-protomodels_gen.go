// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	comments_pb "apis/go/comments"
	"fmt"
	"io"
	"strconv"
)

// ParentMessage Leading Comment Line 1
// ParentMessage Leading Comment Line 2
//
// ParentMessage Leading Comment Line 3
type ParentMessage struct {
	// ParentMessage id leading line 1
	// ParentMessage id leading line 2
	ID int32
	// ParentMessage body leading comment
	Body string
	// ParentMessage comment_enum leading comment
	CommentEnum *CommentEnum
	// ParentMessage nested leading comment
	Nested *ParentMessageNestedMessage
}

func ParentMessageListFromRepeatedProto(in []*comments_pb.ParentMessage) []*ParentMessage {
	out := make([]*ParentMessage, len(in))
	for i, m := range in {
		out[i] = ParentMessageFromProto(m)
	}
	return out
}

func ParentMessageFromProto(in *comments_pb.ParentMessage) *ParentMessage {
	out := &ParentMessage{
		ID:          in.GetId(),
		Body:        in.GetBody(),
		CommentEnum: CommentEnumFromProto(in.GetCommentEnum()),
		Nested:      ParentMessageNestedMessageFromProto(in.GetNested()),
	}

	return out
}

func ParentMessageListToRepeatedProto(in []*ParentMessage) []*comments_pb.ParentMessage {
	out := make([]*comments_pb.ParentMessage, len(in))
	for i, m := range in {
		out[i] = ParentMessageToProto(m)
	}
	return out
}

func ParentMessageToProto(in *ParentMessage) *comments_pb.ParentMessage {
	out := &comments_pb.ParentMessage{
		Id:          in.ID,
		Body:        in.Body,
		CommentEnum: CommentEnumToProto(in.CommentEnum),
		Nested:      ParentMessageNestedMessageToProto(in.Nested),
	}

	return out
}

// ParentMessage Leading Comment Line 1
// ParentMessage Leading Comment Line 2
//
// ParentMessage Leading Comment Line 3
type ParentMessageInput struct {
	// ParentMessage id leading line 1
	// ParentMessage id leading line 2
	ID int32
	// ParentMessage body leading comment
	Body string
	// ParentMessage comment_enum leading comment
	CommentEnum *CommentEnum
	// ParentMessage nested leading comment
	Nested *ParentMessageNestedMessageInput
}

func ParentMessageInputListFromRepeatedProto(in []*comments_pb.ParentMessage) []*ParentMessageInput {
	out := make([]*ParentMessageInput, len(in))
	for i, m := range in {
		out[i] = ParentMessageInputFromProto(m)
	}
	return out
}

func ParentMessageInputFromProto(in *comments_pb.ParentMessage) *ParentMessageInput {
	out := &ParentMessageInput{
		ID:          in.GetId(),
		Body:        in.GetBody(),
		CommentEnum: CommentEnumFromProto(in.GetCommentEnum()),
		Nested:      ParentMessageNestedMessageInputFromProto(in.GetNested()),
	}

	return out
}

func ParentMessageInputListToRepeatedProto(in []*ParentMessageInput) []*comments_pb.ParentMessage {
	out := make([]*comments_pb.ParentMessage, len(in))
	for i, m := range in {
		out[i] = ParentMessageInputToProto(m)
	}
	return out
}

func ParentMessageInputToProto(in *ParentMessageInput) *comments_pb.ParentMessage {
	out := &comments_pb.ParentMessage{
		Id:          in.ID,
		Body:        in.Body,
		CommentEnum: CommentEnumToProto(in.CommentEnum),
		Nested:      ParentMessageNestedMessageInputToProto(in.Nested),
	}

	return out
}

// NestedMessage Leading line 1
//
// NestedMessage Leading line 2
type ParentMessageNestedMessage struct {
	// NestedMessage body leading comment
	NestedBody string
}

func ParentMessageNestedMessageListFromRepeatedProto(in []*comments_pb.ParentMessage_NestedMessage) []*ParentMessageNestedMessage {
	out := make([]*ParentMessageNestedMessage, len(in))
	for i, m := range in {
		out[i] = ParentMessageNestedMessageFromProto(m)
	}
	return out
}

func ParentMessageNestedMessageFromProto(in *comments_pb.ParentMessage_NestedMessage) *ParentMessageNestedMessage {
	out := &ParentMessageNestedMessage{
		NestedBody: in.GetNestedBody(),
	}

	return out
}

func ParentMessageNestedMessageListToRepeatedProto(in []*ParentMessageNestedMessage) []*comments_pb.ParentMessage_NestedMessage {
	out := make([]*comments_pb.ParentMessage_NestedMessage, len(in))
	for i, m := range in {
		out[i] = ParentMessageNestedMessageToProto(m)
	}
	return out
}

func ParentMessageNestedMessageToProto(in *ParentMessageNestedMessage) *comments_pb.ParentMessage_NestedMessage {
	out := &comments_pb.ParentMessage_NestedMessage{
		NestedBody: in.NestedBody,
	}

	return out
}

// NestedMessage Leading line 1
//
// NestedMessage Leading line 2
type ParentMessageNestedMessageInput struct {
	// NestedMessage body leading comment
	NestedBody string
}

func ParentMessageNestedMessageInputListFromRepeatedProto(in []*comments_pb.ParentMessage_NestedMessage) []*ParentMessageNestedMessageInput {
	out := make([]*ParentMessageNestedMessageInput, len(in))
	for i, m := range in {
		out[i] = ParentMessageNestedMessageInputFromProto(m)
	}
	return out
}

func ParentMessageNestedMessageInputFromProto(in *comments_pb.ParentMessage_NestedMessage) *ParentMessageNestedMessageInput {
	out := &ParentMessageNestedMessageInput{
		NestedBody: in.GetNestedBody(),
	}

	return out
}

func ParentMessageNestedMessageInputListToRepeatedProto(in []*ParentMessageNestedMessageInput) []*comments_pb.ParentMessage_NestedMessage {
	out := make([]*comments_pb.ParentMessage_NestedMessage, len(in))
	for i, m := range in {
		out[i] = ParentMessageNestedMessageInputToProto(m)
	}
	return out
}

func ParentMessageNestedMessageInputToProto(in *ParentMessageNestedMessageInput) *comments_pb.ParentMessage_NestedMessage {
	out := &comments_pb.ParentMessage_NestedMessage{
		NestedBody: in.NestedBody,
	}

	return out
}

// CommentEnum leading line 1
//
// CommentEnum leading line 2
type CommentEnum struct {
	Proto comments_pb.CommentEnum
}

func CommentEnumListFromRepeatedProto(in []comments_pb.CommentEnum) []*CommentEnum {
	out := make([]*CommentEnum, len(in))
	for i, m := range in {
		out[i] = CommentEnumFromProto(m)
	}
	return out
}

func CommentEnumFromProto(in comments_pb.CommentEnum) *CommentEnum {
	return &CommentEnum{Proto: in}
}

func CommentEnumListToRepeatedProto(in []*CommentEnum) []comments_pb.CommentEnum {
	out := make([]comments_pb.CommentEnum, len(in))
	for i, m := range in {
		out[i] = CommentEnumToProto(m)
	}
	return out
}

func CommentEnumToProto(in *CommentEnum) comments_pb.CommentEnum {
	return in.Proto
}

func (e CommentEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.Proto.String()))
}

func (e *CommentEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	e.Proto = comments_pb.CommentEnum(comments_pb.CommentEnum_value[str])
	return nil
}

