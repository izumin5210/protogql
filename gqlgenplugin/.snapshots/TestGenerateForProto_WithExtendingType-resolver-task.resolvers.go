// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package resolver

import (
	"context"
	"testapp/model"
)

func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	// This function body is generated by github.com/izumin5210/remixer. DO NOT EDIT.

	resp, err := (&queryProtoResolver{Resolver: r.Resolver}).Tasks(ctx)
	if err != nil {
		return nil, err
	}
	return model.TaskListFromRepeatedProto(resp), nil
}

func (r *queryResolver) LatestTask(ctx context.Context) (*model.Task, error) {
	// This function body is generated by github.com/izumin5210/remixer. DO NOT EDIT.

	resp, err := (&queryProtoResolver{Resolver: r.Resolver}).LatestTask(ctx)
	if err != nil {
		return nil, err
	}
	return model.TaskFromProto(resp), nil
}

func (r *taskResolver) Assignees(ctx context.Context, obj *model.Task) ([]*model.User, error) {
	// This function body is generated by github.com/izumin5210/remixer. DO NOT EDIT.

	resp, err := (&taskProtoResolver{Resolver: r.Resolver}).Assignees(ctx, model.TaskToProto(obj))
	if err != nil {
		return nil, err
	}
	return model.UserListFromRepeatedProto(resp), nil
}

func (r *taskResolver) Author(ctx context.Context, obj *model.Task) (*model.User, error) {
	// This function body is generated by github.com/izumin5210/remixer. DO NOT EDIT.

	resp, err := (&taskProtoResolver{Resolver: r.Resolver}).Author(ctx, model.TaskToProto(obj))
	if err != nil {
		return nil, err
	}
	return model.UserFromProto(resp), nil
}

func (r *userResolver) AssignedTasks(ctx context.Context, obj *model.User) ([]*model.Task, error) {
	// This function body is generated by github.com/izumin5210/remixer. DO NOT EDIT.

	resp, err := (&userProtoResolver{Resolver: r.Resolver}).AssignedTasks(ctx, model.UserToProto(obj))
	if err != nil {
		return nil, err
	}
	return model.TaskListFromRepeatedProto(resp), nil
}

