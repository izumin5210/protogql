package protoresolvergen

var templateProtoResolvers = `
{{ reserveImport "context" }}
{{ reserveImport "fmt" }}

{{ range $resolver := .Resolvers }}
	func (r *{{ $resolver.ProtoImplementationName }}) {{ $resolver.GoFieldName }}{{ $resolver.ShortProtoResolverDeclaration }} {
		panic(fmt.Errorf("not implemented"))
	}
{{ end }}

{{ range $obj := .Objects -}}
	type {{ $obj | $.ProtoResolverImplementationName }} struct { *{{ $.ResolverTypeName }} }
{{ end }}
`

var templateResolvers = `
{{ reserveImport "context" }}

{{ range $resolver := .Resolvers }}
	func (r *{{ $resolver.ImplementationName }}) {{ $resolver.GoFieldName }}{{ $resolver.ShortResolverDeclaration }} {
		// This function body is generated by github.com/izumin5210/remixer. DO NOT EDIT.

		resp, err := (&{{ $resolver.ProtoImplementationName }}{Resolver: r.Resolver}).{{ $resolver.GoFieldName }}({{ $resolver.ArgList }})
		if err != nil {
			return nil, err
		}
		{{ if $resolver.TypeReference.IsScalar -}}
			return resp, nil
		{{ else -}}
			return {{ $resolver.ResolverModelFromProtoFunc }}(resp), nil
		{{ end -}}
	}
{{ end }}

{{ range $obj := .Objects -}}
	// {{$obj.Name}} returns {{ $obj.ResolverInterface | ref }} implementation.
	func (r *{{$.ResolverTypeName}}) {{$obj.Name}}() {{ $obj.ResolverInterface | ref }} { return &{{ $obj | $.ResolverImplementationName }}{r} }

	type {{ $obj | $.ResolverImplementationName }} struct { *{{ $.ResolverTypeName }} }
{{ end -}}
`
