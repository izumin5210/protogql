{{ reserveImport "fmt" }}
{{ reserveImport "io" }}
{{ reserveImport "strconv" }}

{{- range $obj := .ObjectsFromProto }}
	{{- with $obj.Godoc }}
		{{ . }}
	{{- end }}
	type {{ $obj.GoTypeName }} struct {
		{{- range $f := $obj.Fields }}
			{{- with $f.Godoc }}
				{{ . }}
			{{- end }}
			{{ $f.GoFieldName }} {{ $f.GoFieldTypeDefinition }}
		{{- end }}
	}

	func {{ $obj.FuncNameFromRepeatedProto }}(in []*{{ $obj.PbGoTypeName }}) []*{{ $obj.GoTypeName }} {
		out := make([]*{{ $obj.GoTypeName }}, len(in))
		for i, m := range in {
			out[i] = {{ $obj.FuncNameFromProto }}(m)
		}
		return out
	}

	func {{ $obj.FuncNameFromProto }}(in *{{ $obj.PbGoTypeName }}) *{{ $obj.GoTypeName }} {
		out := &{{ $obj.GoTypeName }}{
			{{- range $f := $obj.Fields }}
				{{- if not $f.IsOneofMember }}
					{{- with ($f.FromProtoStatement "in") }}
						{{ $f.GoFieldName }}: {{ . }},
					{{- end }}
				{{- end }}
			{{- end }}
		}

		{{- range $f := $obj.Fields }}
			{{- if $f.IsOneofMember }}
				if m := in.Get{{ $f.PbGoFieldName }}(); m != nil{
					out.{{ $f.GoFieldName }} = {{ $f.ProtoType.FuncNameFromProto }}(m)
				}
			{{- end }}
		{{- end }}

		return out
	}

	func {{ $obj.FuncNameToRepeatedProto }}(in []*{{ $obj.GoTypeName }}) []*{{ $obj.PbGoTypeName }} {
		out := make([]*{{ $obj.PbGoTypeName }}, len(in))
		for i, m := range in {
			out[i] = {{ $obj.FuncNameToProto }}(m)
		}
		return out
	}

	func {{ $obj.FuncNameToProto }}(in *{{ $obj.GoTypeName }}) *{{ $obj.PbGoTypeName }} {
		out := &{{ $obj.PbGoTypeName }}{
			{{- range $f := $obj.Fields }}
				{{- if not $f.IsOneof }}
					{{- with ($f.ToProtoStatement "in") }}
						{{ $f.PbGoFieldName }}: {{ . }},
					{{- end }}
				{{- end }}
			{{- end }}
		}

		{{- range $f := $obj.Fields }}
			{{- with $f.OneofMembers }}
				switch m := in.{{ $f.GoFieldName }}.(type) {
				{{- range $member := . }}
				case *{{ $member.GoTypeName }}:
					out.{{ $f.PbGoFieldName }} = {{ $member.FuncNameToProto }}(m)
				{{- end }}
				}
			{{- end }}
		{{- end }}

		return out
	}
{{ end }}

{{- range $obj := .ObjectsHasProto }}
	{{- with $obj.Godoc }}
		{{ . }}
	{{- end }}
	type {{ $obj.GoWrapperTypeName }} struct {
		{{- range $f := $obj.Fields }}
			{{- with $f.Godoc }}
				{{ . }}
			{{- end }}
			{{ $f.GoFieldName }} {{ $f.GoFieldTypeDefinition }}
		{{- end }}
	}

	func {{ $obj.FuncNameFromRepeatedProto }}(in []*{{ $obj.GoWrapperTypeName }}) []*{{ $obj.GoTypeName }} {
		out := make([]*{{ $obj.GoTypeName }}, len(in))
		for i, m := range in {
			out[i] = {{ $obj.FuncNameFromProto }}(m)
		}
		return out
	}

	func {{ $obj.FuncNameFromProto }}(in *{{ $obj.GoWrapperTypeName }}) *{{ $obj.GoTypeName }} {
		return &{{ $obj.GoTypeName }}{
			{{- range $f := $obj.Fields }}
				{{ $f.GoFieldName }}: {{ $f.FromProtoStatement "in" }},
			{{- end }}
		}
	}

	func {{ $obj.FuncNameToRepeatedProto }}(in []*{{ $obj.GoTypeName }}) []*{{ $obj.GoWrapperTypeName }}{
		out := make([]*{{ $obj.GoWrapperTypeName }}, len(in))
		for i, m := range in {
			out[i] = {{ $obj.FuncNameToProto }}(m)
		}
		return out
	}

	func {{ $obj.FuncNameToProto }}(in *{{ $obj.GoTypeName }}) *{{ $obj.GoWrapperTypeName }}{
		return &{{ $obj.GoWrapperTypeName }}{
			{{- range $f := $obj.Fields }}
				{{ $f.GoFieldName }}: {{ $f.ToProtoStatement "in" }},
			{{- end }}
		}
	}
{{ end }}

{{- range $enum := .EnumsFromProto }}
	{{- with $enum.Godoc }}
		{{ . }}
	{{- end }}
	type {{ $enum.GoTypeName }} struct {
		Proto {{ $enum.PbGoTypeName }}
	}

	func {{ $enum.FuncNameFromRepeatedProto }}(in []{{ $enum.PbGoTypeName }}) []*{{ $enum.GoTypeName }} {
		out := make([]*{{ $enum.GoTypeName }}, len(in))
		for i, m := range in {
			out[i] = {{ $enum.FuncNameFromProto }}(m)
		}
		return out
	}

	func {{ $enum.FuncNameFromProto }}(in {{ $enum.PbGoTypeName }}) *{{ $enum.GoTypeName }} {
		return &{{ $enum.GoTypeName }}{Proto: in}
	}

	func {{ $enum.FuncNameToRepeatedProto }}(in []*{{ $enum.GoTypeName }}) []{{ $enum.PbGoTypeName }} {
		out := make([]{{ $enum.PbGoTypeName }}, len(in))
		for i, m := range in {
			out[i] = {{ $enum.FuncNameToProto }}(m)
		}
		return out
	}

	func {{ $enum.FuncNameToProto }}(in *{{ $enum.GoTypeName }}) {{ $enum.PbGoTypeName }} {
		return in.Proto
	}

	func (e {{ $enum.GoTypeName }}) MarshalGQL(w io.Writer) {
		fmt.Fprint(w, strconv.Quote(e.Proto.String()))
	}

	func (e *{{ $enum.GoTypeName }}) UnmarshalGQL(v interface{}) error {
		str, ok := v.(string)
		if !ok {
			return fmt.Errorf("enums must be strings")
		}

		e.Proto = {{ $enum.PbGoTypeName }}({{ $enum.PbGoTypeName }}_value[str])
		return nil
	}
{{ end }}

{{- range $union := .UnionsFromProto }}
	{{- with $union.Godoc }}
		{{ . }}
	{{- end }}
	type {{ $union.GoTypeName }} interface {
		Is{{ $union.GoTypeName }}()
	}

	{{- range $member := $union.Members }}
		func (*{{ $member.GoTypeName }}) Is{{ $union.GoTypeName }}() {}
	{{ end }}

	func {{ $union.FuncNameFromProto }}(in interface{}) {{ $union.GoTypeName }} {
		switch m := in.(type) {
		{{- range $member := $union.Members }}
		case *{{ $member.PbGoTypeName }}:
			return {{ $member.FuncNameFromProto }}(m.{{ $member.PbGoTypeFieldName }})
		{{- end }}
		default:
			panic("not supported")
		}
	}

	{{- range $member := $union.Members }}
		func {{ $member.FuncNameToProto }}(in *{{ $member.GoTypeName }}) *{{ $member.PbGoTypeName }} {
			return &{{ $member.PbGoTypeName }}{{"{"}}{{ $member.Type.FuncNameToProto }}(in){{"}"}}
		}
	{{ end }}
{{ end }}

{{- range $union := .UnionsHasProto }}
	{{- with $union.Godoc }}
		{{ . }}
	{{- end }}
	type {{ $union.GoWrapperTypeName }} struct {
		Raw {{ $union.GoTypeName }}
	}

	{{- range $member := $union.Members }}
		{{- if isProtoType $member.Type }}
			func (*{{ $member.Type.GoTypeName }}) Is{{ $union.GoTypeName }}() {}
		{{- end }}

		func (u *{{ $union.GoWrapperTypeName }}) Get{{ $member.Type.GoTypeName }}() *{{ goWrapperTypeName $member.Type }}{
			if m, ok := u.Raw.(*{{ $member.Type.GoTypeName }}); ok {
				return {{ unwrapStatement $member.Type "m" }}
			}
			return nil
		}
	{{ end }}

	func {{ $union.FuncNameFromProto }}(in *{{ $union.GoWrapperTypeName }}) {{ $union.GoTypeName }} {
		return in.Raw
	}

	func {{ $union.FuncNameToProto }}(in {{ $union.GoTypeName }}) *{{ $union.GoWrapperTypeName }} {
		return &{{ $union.GoWrapperTypeName }}{{"{"}}Raw: in{{"}"}}
	}
{{ end }}
