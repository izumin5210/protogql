{{ reserveImport "fmt" }}
{{ reserveImport "io" }}
{{ reserveImport "strconv" }}

{{- range $obj := .ObjectsFromProto }}
	{{- with $obj.Godoc }}
		{{ . }}
	{{- end }}
	type {{ $obj.GoType.Name }} struct {
		{{- range $f := $obj.Fields }}
			{{- with $f.Godoc }}
				{{ . }}
			{{- end }}
			{{ $f.GoFieldName }} {{ $f.GoFieldTypeDefinition }}
		{{- end }}
	}

	{{- range $itf := $obj.ImplementedInterfaces }}
		func ({{ $obj.GoType.Name }}) Is{{ $itf.GoType.Name }}() {}
	{{- end }}

	func {{ fromRepeatedProtoFuncSignature $obj }} {
		out := make([]{{ $obj.GoType.TypeString }}, len(in))
		for i, m := range in {
			out[i] = {{ funcCall (fromProtoFunc $obj) "m" }}
		}
		return out
	}

	func {{ fromProtoFuncSignature $obj }} {
		out := &{{ $obj.GoType.QualifiedIdent }}{
			{{- range $f := $obj.Fields }}
				{{- if not $f.IsOneofMember }}
					{{- with ($f.FromProtoStatement "in") }}
						{{ $f.GoFieldName }}: {{ . }},
					{{- end }}
				{{- end }}
			{{- end }}
		}

		{{- range $f := $obj.Fields }}
			{{- if $f.IsOneofMember }}
				if m := in.Get{{ $f.PbGoFieldName }}(); m != nil{
					out.{{ $f.GoFieldName }} = {{ funcCall (fromProtoFunc $f.ProtoType) "m" }}
				}
			{{- end }}
		{{- end }}

		return out
	}

	func {{ toRepeatedProtoFuncSignature $obj }} {
		out := make([]{{ $obj.ProtoGoType.TypeString }}, len(in))
		for i, m := range in {
			out[i] = {{ funcCall (toProtoFunc $obj) "m" }}
		}
		return out
	}

	func {{ toProtoFuncSignature $obj }} {
		out := &{{ $obj.ProtoGoType.QualifiedIdent }}{
			{{- range $f := $obj.Fields }}
				{{- if not $f.IsOneof }}
					{{- with ($f.ToProtoStatement "in") }}
						{{ $f.PbGoFieldName }}: {{ . }},
					{{- end }}
				{{- end }}
			{{- end }}
		}

		{{- range $f := $obj.Fields }}
			{{- with $f.OneofMembers }}
				switch m := in.{{ $f.GoFieldName }}.(type) {
				{{- range $member := . }}
				case {{ $member.GoType.TypeString }}:
					out.{{ $f.PbGoFieldName }} = {{ funcCall (toProtoFunc $member) "m" }}
				{{- end }}
				}
			{{- end }}
		{{- end }}

		return out
	}
{{ end }}

{{- range $obj := .ObjectsHasProto }}
	{{- with $obj.Godoc }}
		{{ . }}
	{{- end }}
	type {{ $obj.ProtoGoType.Name }} struct {
		{{- range $f := $obj.Fields }}
			{{- with $f.Godoc }}
				{{ . }}
			{{- end }}
			{{ $f.GoFieldName }} {{ $f.GoFieldTypeDefinition }}
		{{- end }}
	}

	{{- range $itf := $obj.ImplementedInterfaces }}
		func ({{ $obj.ProtoGoType.Name }}) Is{{ $itf.GoType.Name }}() {}
	{{- end }}

	func {{ fromRepeatedProtoFuncSignature $obj }} {
		out := make([]{{ $obj.GoType.TypeString }}, len(in))
		for i, m := range in {
			out[i] = {{ funcCall (fromProtoFunc $obj) "m" }}
		}
		return out
	}

	func {{ fromProtoFuncSignature $obj }} {
		return &{{ $obj.GoType.QualifiedIdent }}{
			{{- range $f := $obj.Fields }}
				{{ $f.GoFieldName }}: {{ $f.FromProtoStatement "in" }},
			{{- end }}
		}
	}

	func {{ toRepeatedProtoFuncSignature $obj }} {
		out := make([]{{ $obj.ProtoGoType.TypeString  }}, len(in))
		for i, m := range in {
			out[i] = {{ funcCall (toProtoFunc $obj) "m" }}
		}
		return out
	}

	func {{ toProtoFuncSignature $obj }} {
		return &{{ $obj.ProtoGoType.QualifiedIdent }}{
			{{- range $f := $obj.Fields }}
				{{ $f.GoFieldName }}: {{ $f.ToProtoStatement "in" }},
			{{- end }}
		}
	}
{{ end }}

{{- range $enum := .EnumsFromProto }}
	{{- with $enum.Godoc }}
		{{ . }}
	{{- end }}
	type {{ $enum.GoType.Name }} struct {
		Proto {{ $enum.ProtoGoType.TypeString }}
	}

	func {{ fromRepeatedProtoFuncSignature $enum }} {
		out := make([]{{ $enum.GoType.TypeString }}, len(in))
		for i, m := range in {
			out[i] = {{ funcCall (fromProtoFunc $enum) "m" }}
		}
		return out
	}

	func {{ fromProtoFuncSignature $enum }} {
		return &{{ $enum.GoType.QualifiedIdent }}{Proto: in}
	}

	func {{ toRepeatedProtoFuncSignature $enum }} {
		out := make([]{{ $enum.ProtoGoType.TypeString }}, len(in))
		for i, m := range in {
			out[i] = {{ funcCall (toProtoFunc $enum) "m" }}
		}
		return out
	}

	func {{ toProtoFuncSignature $enum }} {
		return in.Proto
	}

	func (e {{ $enum.GoType.Name }}) MarshalGQL(w io.Writer) {
		fmt.Fprint(w, strconv.Quote(e.Proto.String()))
	}

	func (e *{{ $enum.GoType.Name }}) UnmarshalGQL(v interface{}) error {
		str, ok := v.(string)
		if !ok {
			return fmt.Errorf("enums must be strings")
		}

		e.Proto = {{ funcCall $enum.ProtoGoType.TypeString (printf "%s_value[str]" $enum.ProtoGoType.TypeString) }}
		return nil
	}
{{ end }}

{{- range $union := .UnionsFromProto }}
	{{- with $union.Godoc }}
		{{ . }}
	{{- end }}
	type {{ $union.GoType.Name }} interface {
		Is{{ $union.GoType.Name }}()
	}

	{{- range $member := $union.Members }}
		func (*{{ $member.GoType.Name }}) Is{{ $union.GoType.Name }}() {}
	{{ end }}

	func {{ fromProtoFuncSignature $union }} {
		switch m := in.(type) {
		{{- range $member := $union.Members }}
		case {{ $member.ProtoGoType.TypeString }}:
			return {{ funcCall (fromProtoFunc $member.Type) (printf "%s.%s" "m" $member.PbGoTypeFieldName) }}
		{{- end }}
		default:
			panic("not supported")
		}
	}

	{{- range $member := $union.Members }}
		func {{ toProtoFuncSignature $member }} {
			return &{{ $member.ProtoGoType.QualifiedIdent }}{{"{"}}{{ funcCall (toProtoFunc $member.Type) "in" }}{{"}"}}
		}
	{{ end }}
{{ end }}

{{- range $union := .UnionsHasProto }}
	{{- with $union.Godoc }}
		{{ . }}
	{{- end }}
	type {{ $union.ProtoGoType.Name }} struct {
		Raw {{ $union.GoType.TypeString }}
	}

	{{- range $member := $union.Members }}
		{{- if isFromProto $member.Type }}
			func (*{{ $member.Type.GoType.Name }}) Is{{ $union.GoType.Name }}() {}
		{{- end }}

		func (u {{ $union.ProtoGoType.TypeString }}) Get{{ $member.Type.GoType.Name }}() {{ (goWrapperType $member.Type).TypeString }}{
			if m, ok := u.Raw.({{ $member.Type.GoType.TypeString }}); ok {
				return {{ unwrapStatement $member.Type "m" }}
			}
			return nil
		}
	{{ end }}

	func {{ fromRepeatedProtoFuncSignature $union }} {
		out := make([]{{ $union.GoType.Name }}, len(in))
		for i, m := range in {
			out[i] = {{ funcCall (fromProtoFunc $union) "m" }}
		}
		return out
	}

	func {{ fromProtoFuncSignature $union }} {
		return in.Raw
	}

	func {{ toRepeatedProtoFuncSignature $union }} {
		out := make([]{{ $union.ProtoGoType.TypeString }}, len(in))
		for i, m := range in {
			out[i] = {{ funcCall (toProtoFunc $union) "m" }}
		}
		return out
	}

	func {{ toProtoFuncSignature $union }} {
		return &{{ $union.ProtoGoType.QualifiedIdent }}{{"{"}}Raw: in{{"}"}}
	}
{{ end }}
