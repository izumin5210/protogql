{{ reserveImport "fmt" }}
{{ reserveImport "io" }}
{{ reserveImport "strconv" }}

{{- range $obj := .ObjectsFromProto }}
	type {{ $obj.GoTypeName }} struct {
		{{- range $f := $obj.Fields }}
			{{ $f.GoFieldName }} {{ $f.GoFieldTypeDefinition }}
		{{- end }}
	}

	func {{ $obj.FuncNameFromRepeatedProto }}(in []*{{ $obj.PbGoTypeName }}) []*{{ $obj.GoTypeName }} {
		out := make([]*{{ $obj.GoTypeName }}, len(in))
		for i, m := range in {
			out[i] = {{ $obj.FuncNameFromProto }}(m)
		}
		return out
	}

	func {{ $obj.FuncNameFromProto }}(in *{{ $obj.PbGoTypeName }}) *{{ $obj.GoTypeName }} {
		return &{{ $obj.GoTypeName }}{
			{{- range $f := $obj.Fields }}
				{{- with ($f.FromProtoStatement "in") }}
					{{ $f.GoFieldName }}: {{ . }},
				{{- end }}
			{{- end }}
		}
	}

	func {{ $obj.FuncNameToRepeatedProto }}(in []*{{ $obj.GoTypeName }}) []*{{ $obj.PbGoTypeName }} {
		out := make([]*{{ $obj.PbGoTypeName }}, len(in))
		for i, m := range in {
			out[i] = {{ $obj.FuncNameToProto }}(m)
		}
		return out
	}

	func {{ $obj.FuncNameToProto }}(in *{{ $obj.GoTypeName }}) *{{ $obj.PbGoTypeName }} {
		return &{{ $obj.PbGoTypeName}}{
			{{- range $f := $obj.Fields }}
				{{- with ($f.ToProtoStatement "in") }}
					{{ $f.PbGoFieldName }}: {{ . }},
				{{- end }}
			{{- end }}
		}
	}
{{ end }}

{{- range $obj := .ObjectsHasProto }}
	type {{ $obj.GoWrapperTypeName }} struct {
		{{- range $f := $obj.Fields }}
			{{ $f.GoFieldName }} {{ $f.GoFieldTypeDefinition }}
		{{- end }}
	}

	func {{ $obj.FuncNameFromRepeatedProto }}(in []*{{ $obj.GoWrapperTypeName }}) []*{{ $obj.GoTypeName }} {
		out := make([]*{{ $obj.GoTypeName }}, len(in))
		for i, m := range in {
			out[i] = {{ $obj.FuncNameFromProto }}(m)
		}
		return out
	}

	func {{ $obj.FuncNameFromProto }}(in *{{ $obj.GoWrapperTypeName }}) *{{ $obj.GoTypeName }} {
		return &{{ $obj.GoTypeName }}{
			{{- range $f := $obj.Fields }}
				{{ $f.GoFieldName }}: {{ $f.FromProtoStatement "in" }},
			{{- end }}
		}
	}

	func {{ $obj.FuncNameToRepeatedProto }}(in []*{{ $obj.GoTypeName }}) []*{{ $obj.GoWrapperTypeName }}{
		out := make([]*{{ $obj.GoWrapperTypeName }}, len(in))
		for i, m := range in {
			out[i] = {{ $obj.FuncNameToProto }}(m)
		}
		return out
	}

	func {{ $obj.FuncNameToProto }}(in *{{ $obj.GoTypeName }}) *{{ $obj.GoWrapperTypeName }}{
		return &{{ $obj.GoWrapperTypeName }}{
			{{- range $f := $obj.Fields }}
				{{ $f.GoFieldName }}: {{ $f.ToProtoStatement "in" }},
			{{- end }}
		}
	}
{{ end }}

{{- range $enum := .EnumsFromProto }}
	type {{ $enum.GoTypeName }} struct {
		Proto {{ $enum.PbGoTypeName }}
	}

	func {{ $enum.FuncNameFromRepeatedProto }}(in []{{ $enum.PbGoTypeName }}) []*{{ $enum.GoTypeName }} {
		out := make([]*{{ $enum.GoTypeName }}, len(in))
		for i, m := range in {
			out[i] = {{ $enum.FuncNameFromProto }}(m)
		}
		return out
	}

	func {{ $enum.FuncNameFromProto }}(in {{ $enum.PbGoTypeName }}) *{{ $enum.GoTypeName }} {
		return &{{ $enum.GoTypeName }}{Proto: in}
	}

	func {{ $enum.FuncNameToRepeatedProto }}(in []*{{ $enum.GoTypeName }}) []{{ $enum.PbGoTypeName }} {
		out := make([]{{ $enum.PbGoTypeName }}, len(in))
		for i, m := range in {
			out[i] = {{ $enum.FuncNameToProto }}(m)
		}
		return out
	}

	func {{ $enum.FuncNameToProto }}(in *{{ $enum.GoTypeName }}) {{ $enum.PbGoTypeName }} {
		return in.Proto
	}

	func (e {{ $enum.GoTypeName }}) MarshalGQL(w io.Writer) {
		fmt.Fprint(w, strconv.Quote(e.Proto.String()))
	}

	func (e *{{ $enum.GoTypeName }}) UnmarshalGQL(v interface{}) error {
		str, ok := v.(string)
		if !ok {
			return fmt.Errorf("enums must be strings")
		}

		e.Proto = {{ $enum.PbGoTypeName }}({{ $enum.PbGoTypeName }}_value[str])
		return nil
	}
{{ end }}
