// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"context"
	"testdata/task/graph/model"
)

func (a *mutationProtoResolverAdapter) Nop(ctx context.Context) (*bool, error) {
	resp, err := a.protoResolver.Nop(ctx)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *queryProtoResolverAdapter) Nop(ctx context.Context) (*bool, error) {
	resp, err := a.protoResolver.Nop(ctx)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *queryProtoResolverAdapter) Tasks(ctx context.Context) ([]*model.Task, error) {
	resp, err := a.protoResolver.Tasks(ctx)
	if err != nil {
		return nil, err
	}
	return model.TaskListFromRepeatedProto(resp), nil
}

func (a *taskProtoResolverAdapter) Assignees(ctx context.Context, obj *model.Task) ([]*model.User, error) {
	resp, err := a.protoResolver.Assignees(ctx, model.TaskToProto(obj))
	if err != nil {
		return nil, err
	}
	return model.UserListFromRepeatedProto(resp), nil
}

type mutationProtoResolverAdapter struct{ protoResolver *mutationProtoResolver }
type queryProtoResolverAdapter struct{ protoResolver *queryProtoResolver }
type taskProtoResolverAdapter struct{ protoResolver *taskProtoResolver }
